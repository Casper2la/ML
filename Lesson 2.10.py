print("2.10 Stepik ML contest\n\n")

print("Шаг 7\n")

# All print() is commented out

# В процессе решения одной аналитической задачи очень часто замечаешь и другие задачи,
# связанные с исследуемым вопросом. В свое время, работая над предсказанием оттока студентов со stepik,
# я многое изменил в структуре своих курсов.
# Тогда я нашел довольно интересную закономерность прохождения онлайн курсов.
# Слушатели онлайн курсов очень негативно реагируют на невозможность решить задачу, иными словами,
# если студент застрял на определенном шаге, то он, с высокой вероятность, вообще бросит курс,
# чем просто пропустит этот шаг и продолжит обучение.
# Давайте найдем такой стэп, используя данные о сабмитах.
# Для каждого пользователя найдите такой шаг, который он не смог решить, и после этого не пытался решать другие шаги.
# Затем найдите id шага,
# который стал финальной точкой практического обучения на курсе для максимального числа пользователей.
# То есть мы исследуем следующий сценарий: человек решает стэп,
# не может получить правильный ответ и больше не возвращается к практическим задачам.
# Что это за шаг такой, который отпугнул максимальное число пользователей?


# Импортируем библиотеки
import pandas as pd

# считываем файл
submissions_train = pd.read_csv('Lesson 2.10 data/submissions_data_train.csv')
# print(submissions_train.head(), '\n')

# вычисляем максимальную дату попытки для каждого user_id
max_time = submissions_train.groupby('user_id', as_index=False).\
    agg({'timestamp': 'max'}).\
    rename({'timestamp': 'max_time'}, axis=1)

# добавляем в исходный фрейм столбец с максимальной датой
submissions_train = submissions_train.merge(max_time, how='outer')

# отбираем только последние неудачные попытки
max_wrong = submissions_train[(submissions_train.max_time == submissions_train.timestamp) \
                              & (submissions_train.submission_status == 'wrong')]

# подсчитываем количество неудачных попыток для каждого step_id
max_wrong = max_wrong.groupby('step_id', as_index=False).agg({'submission_status': 'count'})

# оставляем только step_id с максимальным числом неудачных попыток
max_wrong = max_wrong[max_wrong.submission_status == max_wrong.submission_status.max()]

print(max_wrong['step_id'])
